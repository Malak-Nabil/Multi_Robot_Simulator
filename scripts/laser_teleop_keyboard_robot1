#!/usr/bin/env python3
import rospy
from geometry_msgs.msg import Twist
import sys, select, termios, tty

msg = """
Control Your Laser Robot!
---------------------------
For Robot 1:
   q    w    e
   a    s    d
   z    x    c

Speed Control for Robot 1:
  t/y : increase/decrease max speeds by 10%
  f/h : increase/decrease only linear speed by 10%
  g/j : increase/decrease only angular speed by 10%

Stop Commands:
  space : stop both robots
  s : stop robot 1

  
CTRL-C to quit
"""

# Movement bindings for both robots
robot1_move = {
    'q': (1, 1),    'w': (1, 0),    'e': (1, -1),
    'a': (0, 1),    'd': (0, -1),
    'z': (-1, 1),   'x': (-1, 0),   'c': (-1, -1)
}

# Speed bindings
speed_bindings = {
    't': (1.1, 1.1, 'robot1'), 'y': (0.9, 0.9, 'robot1'),
    'f': (1.1, 1.0, 'robot1'), 'h': (0.9, 1.0, 'robot1'),
    'g': (1.0, 1.1, 'robot1'), 'j': (1.0, 0.9, 'robot1'),
}

class RobotTeleop:
    def __init__(self):
        rospy.init_node('robot_teleop_keyboard')
        self.pub1 = rospy.Publisher('robot1/cmd_vel', Twist, queue_size=1)
        
        self.speed1 = {'linear': 0.2, 'angular': 1.0}
        
        self.target_linear1 = 0
        self.target_angular1 = 0
        
        self.control_linear1 = 0
        self.control_angular1 = 0
        
        self.settings = termios.tcgetattr(sys.stdin)
        
    def getKey(self):
        tty.setraw(sys.stdin.fileno())
        rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
        key = sys.stdin.read(1) if rlist else ''
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.settings)
        return key
        
    def print_speeds(self):
        print("\rCurrent speeds - Robot1: linear=%.2f, angular=%.2f" %
              (self.speed1['linear'], self.speed1['angular']), end="")
    
    def smooth_control(self, target, current, step):
        if target > current:
            return min(target, current + step)
        elif target < current:
            return max(target, current - step)
        return target
        
    def run(self):
        try:
            print(msg)
            self.print_speeds()
            
            while not rospy.is_shutdown():
                key = self.getKey()
                
                # Reset targets if no key pressed
                if key == '':
                    self.target_linear1 = 0
                    self.target_angular1 = 0
                
                # Movement controls
                elif key in robot1_move.keys():
                    x, th = robot1_move[key]
                    self.target_linear1 = self.speed1['linear'] * x
                    self.target_angular1 = self.speed1['angular'] * th
                
                # Speed adjustments
                elif key in speed_bindings.keys():
                    linear_factor, angular_factor, robot = speed_bindings[key]
                    if robot == 'robot1':
                        self.speed1['linear'] *= linear_factor
                        self.speed1['angular'] *= angular_factor
                    self.print_speeds()
                    
                # Stop commands
                elif key == ' ':
                    self.target_linear1 = 0
                    self.target_angular1 = 0
                elif key == 's':
                    self.target_linear1 = 0
                    self.target_angular1 = 0
                    
                elif key == '\x03':  # CTRL-C
                    break
                
                # Smooth control for both robots
                self.control_linear1 = self.smooth_control(self.target_linear1, self.control_linear1, 0.02)
                self.control_angular1 = self.smooth_control(self.target_angular1, self.control_angular1, 0.1)
                
                # Publish commands
                twist1 = Twist()
                twist1.linear.x = self.control_linear1
                twist1.angular.z = self.control_angular1
                self.pub1.publish(twist1)
                
        except Exception as e:
            print(e)
            
        finally:
            twist1 = Twist()
            self.pub1.publish(twist1)
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, self.settings)

if __name__ == "__main__":
    teleop = RobotTeleop()
    teleop.run()